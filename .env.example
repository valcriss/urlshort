# Server
PORT=3000

# Database
DATABASE_URL=ostgresql://urlshort:urlshort@localhost:5432/urlshort?schema=public

# Admin token (long, random)
ADMIN_BEARER_TOKEN=changeme-long-random-secret

# Keycloak dev (docker-compose.dev.yml exposes http://localhost:8080)
# Procédure complète de configuration (en dev)
# 1) Créez un Realm, ex: "dev".
# 2) Créez un Client OIDC nommé `urlshort`:
#    - Type: Public
#    - Standard Flow: ON
#    - Valid Redirect URIs: http://localhost:3000/*
#    - Web Origins: http://localhost:3000 (ou *)
# 3) Ajoutez le claim des groupes dans l'Access Token (indispensable si KEYCLOAK_USER_GROUP/KEYCLOAK_ADMIN_GROUP sont utilisés):
#    Option A (recommandée): Clients → urlshort → Mappers → Create → "Group Membership"
#      - Token Claim Name: groups
#      - Add to access token: ON
#      - Add to ID token: ON (optionnel)
#      - Full group path: ON (notre app accepte avec/sans "/")
#    Option B (scope): Realm → Client Scopes → Create (Group Membership), puis l'associer au client `urlshort`.
# 4) Créez vos groupes:
#      - Groupe utilisateur (optionnel) ex: urlshort_user
#      - Groupe admin (optionnel) ex: urlshort_admin
# 5) Assignez les groupes aux utilisateurs concernés (Users → user → Groups → Join).
# 6) Déconnectez/reconnectez-vous après toute modif pour régénérer le token.
# 7) Renseignez KEYCLOAK_ISSUER_URL ci-dessous avec l'URL d'issuer du Realm (ex: http://localhost:8080/realms/dev).
# 8) Audience (optionnel): par défaut, KEYCLOAK_ENFORCE_AUDIENCE=false. Si vous passez à true, définissez
#      KEYCLOAK_AUDIENCE sur un aud présent dans vos tokens. Si besoin, ajoutez un "Audience Mapper" au client
#      pour inclure `urlshort` dans `aud`.
KEYCLOAK_ISSUER_URL=http://localhost:8080/realms/dev
# Either audience or client id (optional depending on your tokens)
KEYCLOAK_ENFORCE_AUDIENCE=false
# KEYCLOAK_AUDIENCE=
KEYCLOAK_CLIENT_ID=urlshort

# Groupes Keycloak (optionnels)
# - Si KEYCLOAK_USER_GROUP est défini et non vide, seuls les membres de ce groupe (ou de KEYCLOAK_ADMIN_GROUP) peuvent accéder à l'UI/API.
# - Si KEYCLOAK_ADMIN_GROUP est défini et non vide, ses membres ont des droits admin (voir/éditer/supprimer tous les liens).
#   REMARQUE: seule la clé ADMIN_BEARER_TOKEN permet de créer un lien au nom d'un autre utilisateur (override createdBy).
KEYCLOAK_USER_GROUP=
KEYCLOAK_ADMIN_GROUP=
